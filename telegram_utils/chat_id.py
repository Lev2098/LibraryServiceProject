import os
import django
from dotenv import load_dotenv, set_key


load_dotenv(dotenv_path="C:/Users/lev20/PycharmProjects/LibraryServiceProject/.env")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "library_service.settings")
django.setup()


from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters
from borrowing.models import Borrowing
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async


TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

print(f"TELEGRAM_BOT_TOKEN: {TELEGRAM_BOT_TOKEN}")
print(f"TELEGRAM_CHAT_ID: {TELEGRAM_CHAT_ID}")

if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–æ –≤ .env —Ñ–∞–π–ª—ñ!")

async def start(update: Update, context):
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á"

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è chat_id —É —Ñ–∞–π–ª .env
    set_key(".env", "TELEGRAM_CHAT_ID", str(chat_id))

    await context.bot.send_message(
        chat_id=chat_id,
        text=f"–ü—Ä–∏–≤—ñ—Ç, {username}! –í–∞—à chat_id –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {chat_id}"
             f""
    )
    print(f"–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á: {username}, chat_id: {chat_id}")

User = get_user_model()

EMAIL = range(1)

async def check_my_borrowing_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–Ü–Ω—ñ—Ü—ñ—é—î –ø—Ä–æ—Ü–µ—Å –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏–∫ —ñ –∑–∞–ø–∏—Ç—É—î email –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞."""
    await update.message.reply_text(
        "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–∑–∏–∫:"
    )
    return EMAIL  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ —Å—Ç–∞–Ω—É –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥–µ–Ω–Ω—è email

async def check_my_borrowing_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–æ–±–ª—è—î –≤–≤–µ–¥–µ–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É —ñ –ø–æ–≤–µ—Ä—Ç–∞—î —Å–ø–∏—Å–æ–∫ –ø–æ–∑–∏–∫."""
    chat_id = update.effective_chat.id
    username = update.effective_user.username or "User"
    email = update.message.text.strip()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —è–∫ email

    if not email:
        await update.message.reply_text(
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω—É –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É –ø–æ—à—Ç—É."
        )
        return EMAIL

    try:
        user = await sync_to_async(User.objects.get)(email=email)
    except User.DoesNotExist:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤—ñ—Ç, {username}! –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ—é –ø–æ—à—Ç–æ—é {email} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ."
        )
        return ConversationHandler.END

    borrowings = await sync_to_async(list)(
        Borrowing.objects.filter(user=user).select_related("book")
    )

    if not borrowings:
        await update.message.reply_text(
            f"–ü—Ä–∏–≤—ñ—Ç, {username}! –£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –ø—Ä–æ –ø–æ–∑–∏—á–µ–Ω—ñ –∫–Ω–∏–≥–∏."
        )
        return ConversationHandler.END

    borrowing_list = "\n".join(
        [
            f"üìö –ö–Ω–∏–≥–∞: {borrowing.book.title}\n"
            f"   üìÖ –î–∞—Ç–∞ –ø–æ–∑–∏–∫–∏: {borrowing.date_borrowed}\n"
            f"   ‚è≥ –û—á—ñ–∫—É—î—Ç—å—Å—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è: {borrowing.expected_return_date}\n"
            f"   ‚ùó –°—Ç–∞—Ç—É—Å: {borrowing.status}\n"
            for borrowing in borrowings
        ]
    )

    await update.message.reply_text(
        f"–ü—Ä–∏–≤—ñ—Ç, {username}!\n–û—Å—å —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–∑–∏–∫:\n\n{borrowing_list}"
    )
    return ConversationHandler.END

def main():
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    borrowing_handler = ConversationHandler(
        entry_points=[CommandHandler("check_my_borrowing", check_my_borrowing_start)],
        states={
            EMAIL: [MessageHandler(filters.TEXT & ~filters.COMMAND, check_my_borrowing_email)],
        },
        fallbacks=[],
    )

    application.add_handler(CommandHandler("start", start))
    application.add_handler(borrowing_handler)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ.")
    application.run_polling()

if __name__ == "__main__":
    main()
